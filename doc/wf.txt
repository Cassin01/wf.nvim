==============================================================================
------------------------------------------------------------------------------
                                                                       *wf.nvim*
A modern which-key for neovim

------------------------------------------------------------------------------
                                                                      *select()*
                     `select`({items}, {opts}, {on_choice})
Parameters~
{items} items
{opts} WFOptions
{on_choice} `(fun(string, table)|fun(num,)` table)
Usage~
`require("wf").select(items, opts, on_choice)`


==============================================================================
------------------------------------------------------------------------------
Class~
{hl_group} string Highlight group name, e.g. "ErrorMsg"

------------------------------------------------------------------------------
Class~
{WFHighlight}
Fields~
{WFNormal} hl_group
{WFFloatBorder} hl_group
{WFFloatBorderFocus} hl_group
{WFComment} hl_group
{WFWhichRem} hl_group
{WFWhichOn} hl_group
{WFFuzzy} hl_group
{WFFuzzyPrompt} hl_group
{WFFocus} hl_group
{WFFreeze} hl_group
{WFWhichObjCounter} hl_group
{WFWhichDesc} hl_group
{WFSeparator} hl_group
{WFGroup} hl_group
{WFWhichUnique} hl_group
{WFExpandable} hl_group
{WFTitleOutput} hl_group
{WFTitleWhich} hl_group
{WFTitleFuzzy} hl_group
{WFTitleFreeze} hl_group

------------------------------------------------------------------------------
Class~
{WFConfig}
Fields~
{theme} `(optional)` "default"|"space"|"chad"
{highlight} `(optional)` WFHighlight

------------------------------------------------------------------------------
Class~
{WFBehavior}
Fields~
{skip_front_duplication} `(boolean)`
{skip_back_duplication} `(boolean)`

------------------------------------------------------------------------------
Class~
{Cell}
Fields~
{key} `(string)`
{id} `(string)`
{text} `(string)`
{type} "key"|"group"

------------------------------------------------------------------------------
Class~
{Chunks}
list of [text, hl_group] arrays, each representing a text chunk with specified highlight. hl_group element can not be omitted for not

------------------------------------------------------------------------------
Class~
{WFStyle}
Fields~
{border} `(string)`
of window border. This can either be a string or an array.
nvim_open_win
{borderchars} `(table)` @field top center bottom 
array will specifify the eight chars building up the border in a clockwise fashion starting with the top-left corner.
nvim_open_win
{icons} `(table)` @field separator fuzzy_prompt which_prompt
{input_win_row_offset} `(number)` The width for shift up output-window's row with input-window's height.
number a width for windows

------------------------------------------------------------------------------
Class~
{WFOptions}
Fields~
{title} `(string?)`
{selector} "which"|"fuzzy"
{text_insert_in_advance} `(string)`
{key_group_dict} `(table)`
{prefix_size} `(number)`
{sorter} `(function)`
{behavior} WFBehavior
{output_obj_which_mode_desc_format} `(fun(match_obj:Cell[]):Chunks)`
{style} WFStyle


==============================================================================
------------------------------------------------------------------------------
                                                              *builtin.bookmark*
                      `bookmark`({bookmark_dirs}, {opts})
Parameters~
{bookmark_dirs} `(table)`
{opts} `(optional)` WFOptions


==============================================================================
------------------------------------------------------------------------------
                                                                *builtin.buffer*
                                `buffer`({opts})
Parameters~
{opts} `(optional)` WFOptions


==============================================================================
------------------------------------------------------------------------------
                                                              *builtin.register*
                               `register`({opts})
Parameters~
{opts} `(optional)` WFOptions


==============================================================================
------------------------------------------------------------------------------
                                                             *builtin.which_key*
                              `which_key`({opts})
Parameters~
{opts} `(optional)` WFOptions


==============================================================================
------------------------------------------------------------------------------
                                                                       *setup()*
                                `setup`({opts})
Parameters~
{opts} `(optional)` WFConfig


 vim:tw=78:ts=8:noet:ft=help:norl: